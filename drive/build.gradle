/*
 * Copyright (c) 2014 OpenSilk Productions LLC
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

apply plugin: 'com.android.application'
apply plugin: 'hugo'
apply plugin: 'robolectric'

// Versioning
def versionMajor = 0
def versionMinor = 2
def versionPatch = 0
def versionBuild = 0 // bump for dogfood builds, public betas, etc.

assert(versionMinor < 100) // Double digits
assert(versionPatch < 100) // Double digits
assert(versionBuild < 100) // Double digits

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "org.opensilk.music.plugin.drive"
        minSdkVersion 15
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode versionMajor * 1000000 + versionMinor * 10000 + versionPatch * 100 + versionBuild
        versionName String.format("%d.%d.%d", versionMajor, versionMinor, versionPatch)
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix rootProject.getDebugVersionSuffix()
        }
    }

    if (file('../../KeyStore').exists()) {
        signingConfigs {
            release {
                def Properties keyProps = new Properties()
                keyProps.load(new FileInputStream(file('../../KeyStore/release2.properties')))
                storeFile file(keyProps["store"])
                keyAlias keyProps["alias"]
                storePassword keyProps["storePass"]
                keyPassword keyProps["pass"]
            }
        }
        buildTypes.release.signingConfig signingConfigs.release
        signingConfigs {
            debug {
                def Properties keyProps = new Properties()
                keyProps.load(new FileInputStream(file('../../KeyStore/debug2.properties')))
                storeFile file(keyProps["store"])
                keyAlias keyProps["alias"]
                storePassword keyProps["storePass"]
                keyPassword keyProps["pass"]
            }
        }
        buildTypes.debug.signingConfig signingConfigs.debug
    } else {
        println "No KeyStore directory found! (You can ignore this warning if your name is not drew)"
    }

}

robolectric {
    include '**/*Test.class'
}
// hack for robolectric
// https://github.com/JakeWharton/gradle-android-test-plugin/issues/54
tasks.whenTaskAdded { task ->
    if (task.name == 'testDebug') {
        task.jvmArgs '-XX:MaxPermSize=512m', '-XX:-UseSplitVerifier'
        // use afterTest to listen to the test execution results
        afterTest { descriptor, result ->
            println "Executing test for {$descriptor.name} with result: ${result.resultType}"
        }
    }
}

dependencies {
    compile 'com.jakewharton:butterknife:6.0.0'

    provided 'com.squareup.dagger:dagger-compiler:1.2.2'
    compile 'com.squareup.dagger:dagger:1.2.2'

    compile ('com.google.api-client:google-api-client-android:1.19.0') {
        exclude module: 'httpclient'
    }
    compile ('com.google.apis:google-api-services-drive:v2-rev151-1.19.0') {
        exclude module: 'httpclient'
    }
    compile ('com.google.api-client:google-api-client-gson:1.19.0') {
        exclude module: 'httpclient'
    }
    compile 'com.google.android.gms:play-services-identity:6.5.87'

    compile project(':common')


    androidTestCompile('junit:junit:4.11')
    androidTestCompile('org.robolectric:robolectric:2.4') {
//        exclude module: 'classworlds'
        exclude module: 'commons-logging'
        exclude module: 'httpclient'
//        exclude module: 'maven-artifact'
//        exclude module: 'maven-artifact-manager'
//        exclude module: 'maven-error-diagnostics'
//        exclude module: 'maven-model'
//        exclude module: 'maven-project'
//        exclude module: 'maven-settings'
//        exclude module: 'plexus-container-default'
//        exclude module: 'plexus-interpolation'
//        exclude module: 'plexus-utils'
//        exclude module: 'wagon-file'
//        exclude module: 'wagon-http-lightweight'
//        exclude module: 'wagon-provider-api'
    }
    androidTestCompile('com.squareup:fest-android:1.0.0')
    androidTestCompile('org.mockito:mockito-core:1.10.0')
}
